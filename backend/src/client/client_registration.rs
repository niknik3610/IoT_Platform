use std::time::Duration;

use tokio::time::sleep;

use crate::SERVER_IP;

use self::client_registration_service::{registration_service_client::RegistrationServiceClient, RegistrationRequest};

mod client_registration_service {
    tonic::include_proto!("iot.registration");
}

///Registers client with server, returns ID generated by server
pub async fn register_self() -> anyhow::Result<String>{
    let mut client = RegistrationServiceClient::connect(SERVER_IP).await?;
    let response = client.register(RegistrationRequest {}).await?;
    let id = response.into_inner().client_id;
    return Ok(id);
}

///Repeats the register_self operation until success
pub async fn repeated_register_self() -> String {
    let id = loop {
        let id_req_result = register_self().await;
        match id_req_result {
            Ok(r) => {
                break r;
            },
            Err(ref e) => {
                eprintln!("Error During ID request, trying again");
                eprintln!("{}", e.to_string());
                sleep(Duration::from_millis(500)).await;
            }
        }
    };

    return id;
}
